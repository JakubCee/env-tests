name: Terraform apply
description: Apply terraform changes to the environment

inputs:
  env:
    description: "The AWS env to auth with [dev|prod]"
    required: true
  working-directory:
    description: "The working directory to run Terraform commands in, eg. services/xxx/infra"
    required: false
    default: "."

runs:
  using: "composite"

  steps:
  # Checkout the repository to the GitHub Actions runner
  - name: Checkout
    uses: actions/checkout@v4
    with:
      fetch-depth: 200
    
  # - name: Configure AWS Credentials
  #   uses: ./.github/actions/aws-auth
  #   with:
  #     env: ${{ matrix.env }}
  #     aws_role_name: github-actions-cicd-role
  #     region: ${{ env.AWS_REGION }}

  - name: Simulate aws configure
    shell: bash
    run: |
      echo "Simulate aws configure...."

  
  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v3

  # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  - name: Terraform Init
    shell: bash
    run: terraform init -backend-config="envs/${{ inputs.env }}_init.tfvars"
    working-directory: ${{ inputs.working-directory }}
    
  - name: Terraform Validate
    shell: bash
    run: terraform validate
    working-directory: ${{ inputs.working-directory }}
    
  - name: Plan Terraform
    shell: bash
    run: terraform apply -auto-approve -var-file=envs/${{ inputs.env }}.tfvars
    working-directory: ${{ inputs.working-directory }}

  - name: Checks failed
    shell: bash
    if: (failure() || cancelled())
    run: |
        echo "❌ Infra deloyment failed ❌"
        exit 1

  - name: Checks passed
    shell: bash
    run: echo "✅ Deployment OK ✅"